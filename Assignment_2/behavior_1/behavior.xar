<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="SmallTalking" id="1" localization="8" tooltip="" x="182" y="65"><dialogFile>../SmallTalking/SmallTalking.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="X" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="Y" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="T" type="2" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="go" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" /></Box><Box name="Move To" id="2" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="447" y="66"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03
        self.myX = 0
        self.myY = 0
        self.myT = 0

        self.obstacleX = 3
        self.obstacleY = 0
        self.obstaclePositionErrorThreshold = 1

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_X(self, string):
        self.myX = int(string)

    def onInput_Y(self, string):
        self.myY = int(string)

    def onInput_T(self, string):
        self.myT = int(string)


    def onInput_onStart(self):
        import almath
        import math
        import time
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.myX,self.myY,self.myT)
        expectedEndPosition = initPosition * targetDistance

        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)

        currentPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        positionError = currentPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)

        myDistance = math.sqrt(positionError.x*positionError.x + positionError.y*positionError.y)
        vmyX = positionError.x/myDistance
        vmyY = positionError.y/myDistance
        vmyT = 0

        # add repulsive force to a obstacle
        obstacleDistance = almath.Pose2D(self.obstacleX,self.obstacleY,0)
        expectedObstaclePosition = initPosition * obstacleDistance

        obstaclePositionError = currentPosition.diff(expectedObstaclePosition)
        obstaclePositionError.theta = almath.modulo2PI(obstaclePositionError.theta)

        obstacleDistance = math.sqrt(obstaclePositionError.x * obstaclePositionError.x + obstaclePositionError.y * obstaclePositionError.y )
        vXobs = -(obstaclePositionError.x/obstacleDistance)
        vYobs = -(obstaclePositionError.y/obstacleDistance)
        vTobs = 0

        while (abs(positionError.x) > self.positionErrorThresholdPos
            or abs(positionError.y) > self.positionErrorThresholdPos):
            if (abs(obstacleDistance) < self.obstaclePositionErrorThreshold):
                vmyX = vXobs + vmyX
                vmyY = vYobs + vmyY
                if (vmyX > 1):
                    vmyX = 1
                if (vmyX < -1):
                    vmyX = -1
                if (vmyY > 1):
                    vmyY = 1
                if (vmyY < -1):
                    vmyY = -1
                print("Obstacle")

            self.motion.moveToward(vmyX, vmyY, vmyT)

            currentPosition = almath.Pose2D(self.motion.getRobotPosition(True))
            print(currentPosition)

            positionError = currentPosition.diff(expectedEndPosition)
            positionError.theta = almath.modulo2PI(positionError.theta)

            myDistance = math.sqrt(positionError.x*positionError.x + positionError.y*positionError.y)
            vmyX = positionError.x/myDistance
            vmyY = positionError.y/myDistance
            vmyT = positionError.theta/math.pi

            obstaclePositionError = currentPosition.diff(expectedObstaclePosition)
            obstaclePositionError.theta = almath.modulo2PI(obstaclePositionError.theta)

            obstacleDistance = math.sqrt(obstaclePositionError.x*obstaclePositionError.x + obstaclePositionError.y*obstaclePositionError.y)
            vXobs = -(obstaclePositionError.x/obstacleDistance)
            vYobs = -(obstaclePositionError.y/obstacleDistance)
            vTobs = 0

        print("Arrived to destination!")
        self.motion.moveToward(0, 0, 0)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="X" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="Y" type="2" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="T" type="2" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="7" /><Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="8" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="9" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="10" /><Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="11" /><Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="12" /><Resource name="Legs" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="4" outputowner="1" indexofoutput="5" /><Link inputowner="2" indexofinput="5" outputowner="1" indexofoutput="6" /><Link inputowner="2" indexofinput="6" outputowner="1" indexofoutput="7" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="8" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>